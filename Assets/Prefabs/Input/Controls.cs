//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Prefabs/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""0244154c-d07c-480d-8a14-3351962b1372"",
            ""actions"": [
                {
                    ""name"": ""X_axis"",
                    ""type"": ""Value"",
                    ""id"": ""24b7b2ca-9e2b-46a9-81df-2b27a32e9363"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone"",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Y_axis"",
                    ""type"": ""Value"",
                    ""id"": ""fafa626b-1e01-440f-a0ee-7df247c30e59"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""AxisDeadzone"",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""8702fb8b-fe38-4754-ab47-227ce650a0d9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""58142e78-05ab-437d-9be6-a5c1878add35"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fb5c0df6-b9e2-4d82-9c13-dfcdd207e192"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0f8c542c-8577-4d2c-a5ca-43a68f4c1f92"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49dcaed6-916f-4185-bfb0-d6e665e83463"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9844b0f5-f523-4630-8d91-529a9db74bd7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y_axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""State"",
            ""id"": ""40055903-c820-4622-966e-5d613a4b2cda"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""2a355892-647e-4557-90d3-951dad249f14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""45a7ff03-af90-49b5-a705-9e3f91718ea3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugMenu"",
                    ""type"": ""Button"",
                    ""id"": ""af9d2895-f5a3-46ca-9662-0224436fa4aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""606d8385-f3f1-4320-bece-2aa747e87fa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89ed7faa-4258-489f-ba0e-5866a7d98b3e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620d81b0-90b6-4cf1-b8f1-41e525795e40"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98821a2d-ce6b-4b40-b07b-e491db3a8959"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6580b1ec-b383-4ac9-9391-22acb5f35943"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Hold(duration=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f9aa388-11d5-4d2f-884b-492038656272"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TouchMovement"",
            ""id"": ""8048c009-6412-47e5-9d85-8af5372b33e2"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8324c267-a7d2-44e7-ae2c-9f828966f1ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""Value"",
                    ""id"": ""88ba1249-1e38-4f12-8a41-5f63c19f4d2c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""419561db-0a9f-48df-9fc0-7e60923ce7b7"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97269a12-e6e6-4442-ba85-2a73e4f22804"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_X_axis = m_Movement.FindAction("X_axis", throwIfNotFound: true);
        m_Movement_Y_axis = m_Movement.FindAction("Y_axis", throwIfNotFound: true);
        // State
        m_State = asset.FindActionMap("State", throwIfNotFound: true);
        m_State_StartGame = m_State.FindAction("StartGame", throwIfNotFound: true);
        m_State_PauseMenu = m_State.FindAction("PauseMenu", throwIfNotFound: true);
        m_State_DebugMenu = m_State.FindAction("DebugMenu", throwIfNotFound: true);
        m_State_Back = m_State.FindAction("Back", throwIfNotFound: true);
        // TouchMovement
        m_TouchMovement = asset.FindActionMap("TouchMovement", throwIfNotFound: true);
        m_TouchMovement_PrimaryContact = m_TouchMovement.FindAction("PrimaryContact", throwIfNotFound: true);
        m_TouchMovement_PrimaryPosition = m_TouchMovement.FindAction("PrimaryPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_X_axis;
    private readonly InputAction m_Movement_Y_axis;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @X_axis => m_Wrapper.m_Movement_X_axis;
        public InputAction @Y_axis => m_Wrapper.m_Movement_Y_axis;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @X_axis.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @X_axis.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @X_axis.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnX_axis;
                @Y_axis.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
                @Y_axis.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
                @Y_axis.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnY_axis;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @X_axis.started += instance.OnX_axis;
                @X_axis.performed += instance.OnX_axis;
                @X_axis.canceled += instance.OnX_axis;
                @Y_axis.started += instance.OnY_axis;
                @Y_axis.performed += instance.OnY_axis;
                @Y_axis.canceled += instance.OnY_axis;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // State
    private readonly InputActionMap m_State;
    private IStateActions m_StateActionsCallbackInterface;
    private readonly InputAction m_State_StartGame;
    private readonly InputAction m_State_PauseMenu;
    private readonly InputAction m_State_DebugMenu;
    private readonly InputAction m_State_Back;
    public struct StateActions
    {
        private @Controls m_Wrapper;
        public StateActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_State_StartGame;
        public InputAction @PauseMenu => m_Wrapper.m_State_PauseMenu;
        public InputAction @DebugMenu => m_Wrapper.m_State_DebugMenu;
        public InputAction @Back => m_Wrapper.m_State_Back;
        public InputActionMap Get() { return m_Wrapper.m_State; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StateActions set) { return set.Get(); }
        public void SetCallbacks(IStateActions instance)
        {
            if (m_Wrapper.m_StateActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_StateActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_StateActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_StateActionsCallbackInterface.OnStartGame;
                @PauseMenu.started -= m_Wrapper.m_StateActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.performed -= m_Wrapper.m_StateActionsCallbackInterface.OnPauseMenu;
                @PauseMenu.canceled -= m_Wrapper.m_StateActionsCallbackInterface.OnPauseMenu;
                @DebugMenu.started -= m_Wrapper.m_StateActionsCallbackInterface.OnDebugMenu;
                @DebugMenu.performed -= m_Wrapper.m_StateActionsCallbackInterface.OnDebugMenu;
                @DebugMenu.canceled -= m_Wrapper.m_StateActionsCallbackInterface.OnDebugMenu;
                @Back.started -= m_Wrapper.m_StateActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_StateActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_StateActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_StateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
                @PauseMenu.started += instance.OnPauseMenu;
                @PauseMenu.performed += instance.OnPauseMenu;
                @PauseMenu.canceled += instance.OnPauseMenu;
                @DebugMenu.started += instance.OnDebugMenu;
                @DebugMenu.performed += instance.OnDebugMenu;
                @DebugMenu.canceled += instance.OnDebugMenu;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public StateActions @State => new StateActions(this);

    // TouchMovement
    private readonly InputActionMap m_TouchMovement;
    private ITouchMovementActions m_TouchMovementActionsCallbackInterface;
    private readonly InputAction m_TouchMovement_PrimaryContact;
    private readonly InputAction m_TouchMovement_PrimaryPosition;
    public struct TouchMovementActions
    {
        private @Controls m_Wrapper;
        public TouchMovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_TouchMovement_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_TouchMovement_PrimaryPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchMovementActions set) { return set.Get(); }
        public void SetCallbacks(ITouchMovementActions instance)
        {
            if (m_Wrapper.m_TouchMovementActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_TouchMovementActionsCallbackInterface.OnPrimaryPosition;
            }
            m_Wrapper.m_TouchMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
            }
        }
    }
    public TouchMovementActions @TouchMovement => new TouchMovementActions(this);
    public interface IMovementActions
    {
        void OnX_axis(InputAction.CallbackContext context);
        void OnY_axis(InputAction.CallbackContext context);
    }
    public interface IStateActions
    {
        void OnStartGame(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnDebugMenu(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
    public interface ITouchMovementActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
    }
}
